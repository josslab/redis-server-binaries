name: Check for New Redis Releases

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC
  workflow_dispatch: # Allow manual triggering

jobs:
  check-new-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read last check timestamp
        id: last-check
        run: |
          if [ -f .github/last_check.txt ]; then
            LAST_CHECK=$(cat .github/last_check.txt)
          else
            LAST_CHECK="1970-01-01T00:00:00Z" # Default to Unix epoch if file doesn't exist
          fi
          echo "LAST_CHECK=$LAST_CHECK" >> $GITHUB_OUTPUT

      - name: Fetch new Redis releases
        id: fetch-releases
        run: |
          RESPONSE=$(curl -s "https://api.github.com/repos/redis/redis/releases?per_page=10")
          NEW_RELEASES=$(echo "$RESPONSE" | jq -r --arg LAST_CHECK "${{ steps.last-check.outputs.LAST_CHECK }}" \
            'map(select(.created_at > $LAST_CHECK)) | sort_by(.created_at)')

          echo "New releases:"
          echo "$NEW_RELEASES" | jq -r '.[].tag_name'

          # Save new releases to a file for subsequent steps
          echo "$NEW_RELEASES" > new_releases.json
          echo "new_releases_count=$(echo "$NEW_RELEASES" | jq -r 'length')" >> $GITHUB_OUTPUT

      - name: Process new releases
        if: steps.fetch-releases.outputs.new_releases_count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const newReleases = require('./new_releases.json');
            for (const release of newReleases) {
              console.log(`Triggering build for ${release.tag_name}`);
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'manual-tag.yml',
                ref: context.ref,
                inputs: {
                  tag_name: release.tag_name,
                  make_latest: false,
                  prerelease: false
                }
              });
            }

      - name: Update last check timestamp
        if: steps.fetch-releases.outputs.new_releases_count != '0' && success()
        run: |
          LATEST_RELEASE_TS=$(jq -r '[-1] | .[0].created_at' new_releases.json)
          echo "$LATEST_RELEASE_TS" > .github/last_check.txt
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .github/last_check.txt
          git commit -m "Update last check timestamp to $LATEST_RELEASE_TS"
          git push